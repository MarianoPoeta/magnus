package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a ->
                assertThat(a.getPricePerUnit())
                    .as("check pricePerUnit")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPricePerUnit())
            )
            .satisfies(a -> assertThat(a.getMinOrderQuantity()).as("check minOrderQuantity").isEqualTo(expected.getMinOrderQuantity()))
            .satisfies(a -> assertThat(a.getMaxOrderQuantity()).as("check maxOrderQuantity").isEqualTo(expected.getMaxOrderQuantity()))
            .satisfies(a -> assertThat(a.getSupplier()).as("check supplier").isEqualTo(expected.getSupplier()))
            .satisfies(a -> assertThat(a.getSupplierContact()).as("check supplierContact").isEqualTo(expected.getSupplierContact()))
            .satisfies(a -> assertThat(a.getLeadTime()).as("check leadTime").isEqualTo(expected.getLeadTime()))
            .satisfies(a -> assertThat(a.getShelfLife()).as("check shelfLife").isEqualTo(expected.getShelfLife()))
            .satisfies(a -> assertThat(a.getStorageConditions()).as("check storageConditions").isEqualTo(expected.getStorageConditions()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getLastUpdatedPrice()).as("check lastUpdatedPrice").isEqualTo(expected.getLastUpdatedPrice()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(actual)
            .as("Verify Product relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()));
    }
}
