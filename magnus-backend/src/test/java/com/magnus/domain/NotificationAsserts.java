package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NotificationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationAllPropertiesEquals(Notification expected, Notification actual) {
        assertNotificationAutoGeneratedPropertiesEquals(expected, actual);
        assertNotificationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationAllUpdatablePropertiesEquals(Notification expected, Notification actual) {
        assertNotificationUpdatableFieldsEquals(expected, actual);
        assertNotificationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationAutoGeneratedPropertiesEquals(Notification expected, Notification actual) {
        assertThat(actual)
            .as("Verify Notification auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationUpdatableFieldsEquals(Notification expected, Notification actual) {
        assertThat(actual)
            .as("Verify Notification relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getTargetRole()).as("check targetRole").isEqualTo(expected.getTargetRole()))
            .satisfies(a -> assertThat(a.getRelatedEntityType()).as("check relatedEntityType").isEqualTo(expected.getRelatedEntityType()))
            .satisfies(a -> assertThat(a.getRelatedEntityId()).as("check relatedEntityId").isEqualTo(expected.getRelatedEntityId()))
            .satisfies(a -> assertThat(a.getIsRead()).as("check isRead").isEqualTo(expected.getIsRead()))
            .satisfies(a -> assertThat(a.getIsGlobal()).as("check isGlobal").isEqualTo(expected.getIsGlobal()))
            .satisfies(a -> assertThat(a.getActionRequired()).as("check actionRequired").isEqualTo(expected.getActionRequired()))
            .satisfies(a -> assertThat(a.getActionUrl()).as("check actionUrl").isEqualTo(expected.getActionUrl()))
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a -> assertThat(a.getExpiresAt()).as("check expiresAt").isEqualTo(expected.getExpiresAt()))
            .satisfies(a -> assertThat(a.getReadAt()).as("check readAt").isEqualTo(expected.getReadAt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNotificationUpdatableRelationshipsEquals(Notification expected, Notification actual) {
        assertThat(actual)
            .as("Verify Notification relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getTargetUser()).as("check targetUser").isEqualTo(expected.getTargetUser()));
    }
}
