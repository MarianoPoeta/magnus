package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ShoppingItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingItemAllPropertiesEquals(ShoppingItem expected, ShoppingItem actual) {
        assertShoppingItemAutoGeneratedPropertiesEquals(expected, actual);
        assertShoppingItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingItemAllUpdatablePropertiesEquals(ShoppingItem expected, ShoppingItem actual) {
        assertShoppingItemUpdatableFieldsEquals(expected, actual);
        assertShoppingItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingItemAutoGeneratedPropertiesEquals(ShoppingItem expected, ShoppingItem actual) {
        assertThat(actual)
            .as("Verify ShoppingItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingItemUpdatableFieldsEquals(ShoppingItem expected, ShoppingItem actual) {
        assertThat(actual)
            .as("Verify ShoppingItem relevant properties")
            .satisfies(a -> assertThat(a.getProductName()).as("check productName").isEqualTo(expected.getProductName()))
            .satisfies(a -> assertThat(a.getTotalQuantity()).as("check totalQuantity").isEqualTo(expected.getTotalQuantity()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getBudgetIds()).as("check budgetIds").isEqualTo(expected.getBudgetIds()))
            .satisfies(a -> assertThat(a.getClientNames()).as("check clientNames").isEqualTo(expected.getClientNames()))
            .satisfies(a -> assertThat(a.getIsPurchased()).as("check isPurchased").isEqualTo(expected.getIsPurchased()))
            .satisfies(a -> assertThat(a.getPurchasedQuantity()).as("check purchasedQuantity").isEqualTo(expected.getPurchasedQuantity()))
            .satisfies(a -> assertThat(a.getWeekStart()).as("check weekStart").isEqualTo(expected.getWeekStart()))
            .satisfies(a -> assertThat(a.getWeekEnd()).as("check weekEnd").isEqualTo(expected.getWeekEnd()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getSupplier()).as("check supplier").isEqualTo(expected.getSupplier()))
            .satisfies(a -> assertThat(a.getSupplierContact()).as("check supplierContact").isEqualTo(expected.getSupplierContact()))
            .satisfies(a ->
                assertThat(a.getEstimatedCost())
                    .as("check estimatedCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getEstimatedCost())
            )
            .satisfies(a ->
                assertThat(a.getActualCost())
                    .as("check actualCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getActualCost())
            )
            .satisfies(a -> assertThat(a.getDeliveryDate()).as("check deliveryDate").isEqualTo(expected.getDeliveryDate()))
            .satisfies(a -> assertThat(a.getIsConsolidated()).as("check isConsolidated").isEqualTo(expected.getIsConsolidated()))
            .satisfies(a -> assertThat(a.getConsolidatedAt()).as("check consolidatedAt").isEqualTo(expected.getConsolidatedAt()))
            .satisfies(a -> assertThat(a.getPurchasedAt()).as("check purchasedAt").isEqualTo(expected.getPurchasedAt()))
            .satisfies(a -> assertThat(a.getConflictStatus()).as("check conflictStatus").isEqualTo(expected.getConflictStatus()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShoppingItemUpdatableRelationshipsEquals(ShoppingItem expected, ShoppingItem actual) {
        assertThat(actual)
            .as("Verify ShoppingItem relationships")
            .satisfies(a -> assertThat(a.getPurchasedBy()).as("check purchasedBy").isEqualTo(expected.getPurchasedBy()))
            .satisfies(a -> assertThat(a.getWeeklyPlan()).as("check weeklyPlan").isEqualTo(expected.getWeeklyPlan()));
    }
}
