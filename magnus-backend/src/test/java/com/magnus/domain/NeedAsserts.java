package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class NeedAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNeedAllPropertiesEquals(Need expected, Need actual) {
        assertNeedAutoGeneratedPropertiesEquals(expected, actual);
        assertNeedAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNeedAllUpdatablePropertiesEquals(Need expected, Need actual) {
        assertNeedUpdatableFieldsEquals(expected, actual);
        assertNeedUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNeedAutoGeneratedPropertiesEquals(Need expected, Need actual) {
        assertThat(actual)
            .as("Verify Need auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNeedUpdatableFieldsEquals(Need expected, Need actual) {
        assertThat(actual)
            .as("Verify Need relevant properties")
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a -> assertThat(a.getUrgency()).as("check urgency").isEqualTo(expected.getUrgency()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getRequestedDate()).as("check requestedDate").isEqualTo(expected.getRequestedDate()))
            .satisfies(a -> assertThat(a.getRequiredDate()).as("check requiredDate").isEqualTo(expected.getRequiredDate()))
            .satisfies(a -> assertThat(a.getFulfilledDate()).as("check fulfilledDate").isEqualTo(expected.getFulfilledDate()))
            .satisfies(a ->
                assertThat(a.getEstimatedCost())
                    .as("check estimatedCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getEstimatedCost())
            )
            .satisfies(a ->
                assertThat(a.getActualCost())
                    .as("check actualCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getActualCost())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNeedUpdatableRelationshipsEquals(Need expected, Need actual) {
        assertThat(actual)
            .as("Verify Need relationships")
            .satisfies(a -> assertThat(a.getRequestedBy()).as("check requestedBy").isEqualTo(expected.getRequestedBy()))
            .satisfies(a -> assertThat(a.getFulfilledBy()).as("check fulfilledBy").isEqualTo(expected.getFulfilledBy()))
            .satisfies(a -> assertThat(a.getParentTask()).as("check parentTask").isEqualTo(expected.getParentTask()));
    }
}
