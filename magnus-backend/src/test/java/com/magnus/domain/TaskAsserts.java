package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TaskAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskAllPropertiesEquals(Task expected, Task actual) {
        assertTaskAutoGeneratedPropertiesEquals(expected, actual);
        assertTaskAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskAllUpdatablePropertiesEquals(Task expected, Task actual) {
        assertTaskUpdatableFieldsEquals(expected, actual);
        assertTaskUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskAutoGeneratedPropertiesEquals(Task expected, Task actual) {
        assertThat(actual)
            .as("Verify Task auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskUpdatableFieldsEquals(Task expected, Task actual) {
        assertThat(actual)
            .as("Verify Task relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getAssignedToRole()).as("check assignedToRole").isEqualTo(expected.getAssignedToRole()))
            .satisfies(a -> assertThat(a.getDueDate()).as("check dueDate").isEqualTo(expected.getDueDate()))
            .satisfies(a -> assertThat(a.getDueTime()).as("check dueTime").isEqualTo(expected.getDueTime()))
            .satisfies(a -> assertThat(a.getEstimatedDuration()).as("check estimatedDuration").isEqualTo(expected.getEstimatedDuration()))
            .satisfies(a -> assertThat(a.getActualDuration()).as("check actualDuration").isEqualTo(expected.getActualDuration()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getRequirements()).as("check requirements").isEqualTo(expected.getRequirements()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getInvoiceUrl()).as("check invoiceUrl").isEqualTo(expected.getInvoiceUrl()))
            .satisfies(a -> assertThat(a.getAutoScheduled()).as("check autoScheduled").isEqualTo(expected.getAutoScheduled()))
            .satisfies(a -> assertThat(a.getIsRecurring()).as("check isRecurring").isEqualTo(expected.getIsRecurring()))
            .satisfies(a -> assertThat(a.getParentTaskId()).as("check parentTaskId").isEqualTo(expected.getParentTaskId()))
            .satisfies(a -> assertThat(a.getCompletedAt()).as("check completedAt").isEqualTo(expected.getCompletedAt()))
            .satisfies(a -> assertThat(a.getStartedAt()).as("check startedAt").isEqualTo(expected.getStartedAt()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getConflictStatus()).as("check conflictStatus").isEqualTo(expected.getConflictStatus()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaskUpdatableRelationshipsEquals(Task expected, Task actual) {
        assertThat(actual)
            .as("Verify Task relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getAssignedTo()).as("check assignedTo").isEqualTo(expected.getAssignedTo()))
            .satisfies(a -> assertThat(a.getWeeklyPlan()).as("check weeklyPlan").isEqualTo(expected.getWeeklyPlan()))
            .satisfies(a -> assertThat(a.getRelatedBudget()).as("check relatedBudget").isEqualTo(expected.getRelatedBudget()));
    }
}
