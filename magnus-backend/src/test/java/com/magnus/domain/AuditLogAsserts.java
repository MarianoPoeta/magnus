package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AuditLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogAllPropertiesEquals(AuditLog expected, AuditLog actual) {
        assertAuditLogAutoGeneratedPropertiesEquals(expected, actual);
        assertAuditLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogAllUpdatablePropertiesEquals(AuditLog expected, AuditLog actual) {
        assertAuditLogUpdatableFieldsEquals(expected, actual);
        assertAuditLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogAutoGeneratedPropertiesEquals(AuditLog expected, AuditLog actual) {
        assertThat(actual)
            .as("Verify AuditLog auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogUpdatableFieldsEquals(AuditLog expected, AuditLog actual) {
        assertThat(actual)
            .as("Verify AuditLog relevant properties")
            .satisfies(a -> assertThat(a.getEntityType()).as("check entityType").isEqualTo(expected.getEntityType()))
            .satisfies(a -> assertThat(a.getEntityId()).as("check entityId").isEqualTo(expected.getEntityId()))
            .satisfies(a -> assertThat(a.getAction()).as("check action").isEqualTo(expected.getAction()))
            .satisfies(a -> assertThat(a.getOldValue()).as("check oldValue").isEqualTo(expected.getOldValue()))
            .satisfies(a -> assertThat(a.getNewValue()).as("check newValue").isEqualTo(expected.getNewValue()))
            .satisfies(a -> assertThat(a.getFieldName()).as("check fieldName").isEqualTo(expected.getFieldName()))
            .satisfies(a -> assertThat(a.getUserId()).as("check userId").isEqualTo(expected.getUserId()))
            .satisfies(a -> assertThat(a.getUserRole()).as("check userRole").isEqualTo(expected.getUserRole()))
            .satisfies(a -> assertThat(a.getTimestamp()).as("check timestamp").isEqualTo(expected.getTimestamp()))
            .satisfies(a -> assertThat(a.getIpAddress()).as("check ipAddress").isEqualTo(expected.getIpAddress()))
            .satisfies(a -> assertThat(a.getUserAgent()).as("check userAgent").isEqualTo(expected.getUserAgent()))
            .satisfies(a -> assertThat(a.getSessionId()).as("check sessionId").isEqualTo(expected.getSessionId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAuditLogUpdatableRelationshipsEquals(AuditLog expected, AuditLog actual) {
        assertThat(actual)
            .as("Verify AuditLog relationships")
            .satisfies(a -> assertThat(a.getUser()).as("check user").isEqualTo(expected.getUser()));
    }
}
