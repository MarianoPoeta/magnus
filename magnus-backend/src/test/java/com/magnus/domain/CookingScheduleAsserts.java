package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CookingScheduleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingScheduleAllPropertiesEquals(CookingSchedule expected, CookingSchedule actual) {
        assertCookingScheduleAutoGeneratedPropertiesEquals(expected, actual);
        assertCookingScheduleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingScheduleAllUpdatablePropertiesEquals(CookingSchedule expected, CookingSchedule actual) {
        assertCookingScheduleUpdatableFieldsEquals(expected, actual);
        assertCookingScheduleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingScheduleAutoGeneratedPropertiesEquals(CookingSchedule expected, CookingSchedule actual) {
        assertThat(actual)
            .as("Verify CookingSchedule auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingScheduleUpdatableFieldsEquals(CookingSchedule expected, CookingSchedule actual) {
        assertThat(actual)
            .as("Verify CookingSchedule relevant properties")
            .satisfies(a -> assertThat(a.getEventDate()).as("check eventDate").isEqualTo(expected.getEventDate()))
            .satisfies(a -> assertThat(a.getCookingTime()).as("check cookingTime").isEqualTo(expected.getCookingTime()))
            .satisfies(a -> assertThat(a.getMealType()).as("check mealType").isEqualTo(expected.getMealType()))
            .satisfies(a -> assertThat(a.getMenuName()).as("check menuName").isEqualTo(expected.getMenuName()))
            .satisfies(a -> assertThat(a.getGuestCount()).as("check guestCount").isEqualTo(expected.getGuestCount()))
            .satisfies(a ->
                assertThat(a.getSpecialInstructions()).as("check specialInstructions").isEqualTo(expected.getSpecialInstructions())
            )
            .satisfies(a -> assertThat(a.getIsCompleted()).as("check isCompleted").isEqualTo(expected.getIsCompleted()))
            .satisfies(a -> assertThat(a.getCompletedAt()).as("check completedAt").isEqualTo(expected.getCompletedAt()))
            .satisfies(a -> assertThat(a.getIngredientsReady()).as("check ingredientsReady").isEqualTo(expected.getIngredientsReady()))
            .satisfies(a -> assertThat(a.getEstimatedDuration()).as("check estimatedDuration").isEqualTo(expected.getEstimatedDuration()))
            .satisfies(a -> assertThat(a.getActualDuration()).as("check actualDuration").isEqualTo(expected.getActualDuration()))
            .satisfies(a -> assertThat(a.getStartedAt()).as("check startedAt").isEqualTo(expected.getStartedAt()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getConflictStatus()).as("check conflictStatus").isEqualTo(expected.getConflictStatus()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingScheduleUpdatableRelationshipsEquals(CookingSchedule expected, CookingSchedule actual) {
        assertThat(actual)
            .as("Verify CookingSchedule relationships")
            .satisfies(a -> assertThat(a.getRelatedTask()).as("check relatedTask").isEqualTo(expected.getRelatedTask()))
            .satisfies(a -> assertThat(a.getBudget()).as("check budget").isEqualTo(expected.getBudget()));
    }
}
