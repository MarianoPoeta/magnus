package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ActivityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityAllPropertiesEquals(Activity expected, Activity actual) {
        assertActivityAutoGeneratedPropertiesEquals(expected, actual);
        assertActivityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityAllUpdatablePropertiesEquals(Activity expected, Activity actual) {
        assertActivityUpdatableFieldsEquals(expected, actual);
        assertActivityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityAutoGeneratedPropertiesEquals(Activity expected, Activity actual) {
        assertThat(actual)
            .as("Verify Activity auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityUpdatableFieldsEquals(Activity expected, Activity actual) {
        assertThat(actual)
            .as("Verify Activity relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a ->
                assertThat(a.getBasePrice()).as("check basePrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBasePrice())
            )
            .satisfies(a ->
                assertThat(a.getBaseCost()).as("check baseCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBaseCost())
            )
            .satisfies(a -> assertThat(a.getDuration()).as("check duration").isEqualTo(expected.getDuration()))
            .satisfies(a -> assertThat(a.getMaxCapacity()).as("check maxCapacity").isEqualTo(expected.getMaxCapacity()))
            .satisfies(a -> assertThat(a.getLocation()).as("check location").isEqualTo(expected.getLocation()))
            .satisfies(a -> assertThat(a.getTransportRequired()).as("check transportRequired").isEqualTo(expected.getTransportRequired()))
            .satisfies(a -> assertThat(a.getTransportIncluded()).as("check transportIncluded").isEqualTo(expected.getTransportIncluded()))
            .satisfies(a -> assertThat(a.getEquipmentProvided()).as("check equipmentProvided").isEqualTo(expected.getEquipmentProvided()))
            .satisfies(a -> assertThat(a.getRequirements()).as("check requirements").isEqualTo(expected.getRequirements()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsTemplate()).as("check isTemplate").isEqualTo(expected.getIsTemplate()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityUpdatableRelationshipsEquals(Activity expected, Activity actual) {
        // empty method
    }
}
