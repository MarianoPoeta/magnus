package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TransportAssignmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAssignmentAllPropertiesEquals(TransportAssignment expected, TransportAssignment actual) {
        assertTransportAssignmentAutoGeneratedPropertiesEquals(expected, actual);
        assertTransportAssignmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAssignmentAllUpdatablePropertiesEquals(TransportAssignment expected, TransportAssignment actual) {
        assertTransportAssignmentUpdatableFieldsEquals(expected, actual);
        assertTransportAssignmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAssignmentAutoGeneratedPropertiesEquals(TransportAssignment expected, TransportAssignment actual) {
        assertThat(actual)
            .as("Verify TransportAssignment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAssignmentUpdatableFieldsEquals(TransportAssignment expected, TransportAssignment actual) {
        assertThat(actual)
            .as("Verify TransportAssignment relevant properties")
            .satisfies(a -> assertThat(a.getGuestCount()).as("check guestCount").isEqualTo(expected.getGuestCount()))
            .satisfies(a -> assertThat(a.getDuration()).as("check duration").isEqualTo(expected.getDuration()))
            .satisfies(a -> assertThat(a.getDistance()).as("check distance").isEqualTo(expected.getDistance()))
            .satisfies(a -> assertThat(a.getPickupLocation()).as("check pickupLocation").isEqualTo(expected.getPickupLocation()))
            .satisfies(a -> assertThat(a.getDropoffLocation()).as("check dropoffLocation").isEqualTo(expected.getDropoffLocation()))
            .satisfies(a -> assertThat(a.getPickupTime()).as("check pickupTime").isEqualTo(expected.getPickupTime()))
            .satisfies(a -> assertThat(a.getReturnTime()).as("check returnTime").isEqualTo(expected.getReturnTime()))
            .satisfies(a ->
                assertThat(a.getCalculatedPrice())
                    .as("check calculatedPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCalculatedPrice())
            )
            .satisfies(a ->
                assertThat(a.getCalculatedCost())
                    .as("check calculatedCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCalculatedCost())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAssignmentUpdatableRelationshipsEquals(TransportAssignment expected, TransportAssignment actual) {
        assertThat(actual)
            .as("Verify TransportAssignment relationships")
            .satisfies(a -> assertThat(a.getTransport()).as("check transport").isEqualTo(expected.getTransport()))
            .satisfies(a -> assertThat(a.getBudget()).as("check budget").isEqualTo(expected.getBudget()))
            .satisfies(a -> assertThat(a.getActivity()).as("check activity").isEqualTo(expected.getActivity()));
    }
}
