package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetAllPropertiesEquals(Budget expected, Budget actual) {
        assertBudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertBudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetAllUpdatablePropertiesEquals(Budget expected, Budget actual) {
        assertBudgetUpdatableFieldsEquals(expected, actual);
        assertBudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetAutoGeneratedPropertiesEquals(Budget expected, Budget actual) {
        assertThat(actual)
            .as("Verify Budget auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetUpdatableFieldsEquals(Budget expected, Budget actual) {
        assertThat(actual)
            .as("Verify Budget relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getClientName()).as("check clientName").isEqualTo(expected.getClientName()))
            .satisfies(a -> assertThat(a.getEventDate()).as("check eventDate").isEqualTo(expected.getEventDate()))
            .satisfies(a -> assertThat(a.getEventLocation()).as("check eventLocation").isEqualTo(expected.getEventLocation()))
            .satisfies(a -> assertThat(a.getGuestCount()).as("check guestCount").isEqualTo(expected.getGuestCount()))
            .satisfies(a -> assertThat(a.getEventGender()).as("check eventGender").isEqualTo(expected.getEventGender()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a ->
                assertThat(a.getTotalAmount())
                    .as("check totalAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalAmount())
            )
            .satisfies(a ->
                assertThat(a.getTotalCost()).as("check totalCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotalCost())
            )
            .satisfies(a ->
                assertThat(a.getProfitMargin())
                    .as("check profitMargin")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getProfitMargin())
            )
            .satisfies(a ->
                assertThat(a.getMealsAmount())
                    .as("check mealsAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMealsAmount())
            )
            .satisfies(a ->
                assertThat(a.getActivitiesAmount())
                    .as("check activitiesAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getActivitiesAmount())
            )
            .satisfies(a ->
                assertThat(a.getTransportAmount())
                    .as("check transportAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTransportAmount())
            )
            .satisfies(a ->
                assertThat(a.getAccommodationAmount())
                    .as("check accommodationAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getAccommodationAmount())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()))
            .satisfies(a -> assertThat(a.getIsClosed()).as("check isClosed").isEqualTo(expected.getIsClosed()))
            .satisfies(a -> assertThat(a.getInternalNotes()).as("check internalNotes").isEqualTo(expected.getInternalNotes()))
            .satisfies(a -> assertThat(a.getClientNotes()).as("check clientNotes").isEqualTo(expected.getClientNotes()))
            .satisfies(a -> assertThat(a.getTemplateId()).as("check templateId").isEqualTo(expected.getTemplateId()))
            .satisfies(a -> assertThat(a.getWorkflowTriggered()).as("check workflowTriggered").isEqualTo(expected.getWorkflowTriggered()))
            .satisfies(a ->
                assertThat(a.getLastWorkflowExecution()).as("check lastWorkflowExecution").isEqualTo(expected.getLastWorkflowExecution())
            )
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getConflictStatus()).as("check conflictStatus").isEqualTo(expected.getConflictStatus()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getApprovedAt()).as("check approvedAt").isEqualTo(expected.getApprovedAt()))
            .satisfies(a -> assertThat(a.getReservedAt()).as("check reservedAt").isEqualTo(expected.getReservedAt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetUpdatableRelationshipsEquals(Budget expected, Budget actual) {
        assertThat(actual)
            .as("Verify Budget relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getAssignedTo()).as("check assignedTo").isEqualTo(expected.getAssignedTo()))
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getTemplate()).as("check template").isEqualTo(expected.getTemplate()))
            .satisfies(a -> assertThat(a.getWeeklyPlan()).as("check weeklyPlan").isEqualTo(expected.getWeeklyPlan()));
    }
}
