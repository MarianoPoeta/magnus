package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MenuItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemAllPropertiesEquals(MenuItem expected, MenuItem actual) {
        assertMenuItemAutoGeneratedPropertiesEquals(expected, actual);
        assertMenuItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemAllUpdatablePropertiesEquals(MenuItem expected, MenuItem actual) {
        assertMenuItemUpdatableFieldsEquals(expected, actual);
        assertMenuItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemAutoGeneratedPropertiesEquals(MenuItem expected, MenuItem actual) {
        assertThat(actual)
            .as("Verify MenuItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemUpdatableFieldsEquals(MenuItem expected, MenuItem actual) {
        assertThat(actual)
            .as("Verify MenuItem relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getCost()).as("check cost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getCost()))
            .satisfies(a -> assertThat(a.getAllergens()).as("check allergens").isEqualTo(expected.getAllergens()))
            .satisfies(a -> assertThat(a.getDietaryInfo()).as("check dietaryInfo").isEqualTo(expected.getDietaryInfo()))
            .satisfies(a -> assertThat(a.getPreparationTime()).as("check preparationTime").isEqualTo(expected.getPreparationTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuItemUpdatableRelationshipsEquals(MenuItem expected, MenuItem actual) {
        assertThat(actual)
            .as("Verify MenuItem relationships")
            .satisfies(a -> assertThat(a.getMenu()).as("check menu").isEqualTo(expected.getMenu()));
    }
}
