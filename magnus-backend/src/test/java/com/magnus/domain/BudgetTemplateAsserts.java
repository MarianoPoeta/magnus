package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BudgetTemplateAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetTemplateAllPropertiesEquals(BudgetTemplate expected, BudgetTemplate actual) {
        assertBudgetTemplateAutoGeneratedPropertiesEquals(expected, actual);
        assertBudgetTemplateAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetTemplateAllUpdatablePropertiesEquals(BudgetTemplate expected, BudgetTemplate actual) {
        assertBudgetTemplateUpdatableFieldsEquals(expected, actual);
        assertBudgetTemplateUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetTemplateAutoGeneratedPropertiesEquals(BudgetTemplate expected, BudgetTemplate actual) {
        assertThat(actual)
            .as("Verify BudgetTemplate auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetTemplateUpdatableFieldsEquals(BudgetTemplate expected, BudgetTemplate actual) {
        assertThat(actual)
            .as("Verify BudgetTemplate relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsSystem()).as("check isSystem").isEqualTo(expected.getIsSystem()))
            .satisfies(a -> assertThat(a.getConfiguration()).as("check configuration").isEqualTo(expected.getConfiguration()))
            .satisfies(a -> assertThat(a.getTemplateData()).as("check templateData").isEqualTo(expected.getTemplateData()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetTemplateUpdatableRelationshipsEquals(BudgetTemplate expected, BudgetTemplate actual) {
        assertThat(actual)
            .as("Verify BudgetTemplate relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()));
    }
}
