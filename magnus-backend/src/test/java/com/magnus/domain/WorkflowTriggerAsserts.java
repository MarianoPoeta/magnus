package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WorkflowTriggerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkflowTriggerAllPropertiesEquals(WorkflowTrigger expected, WorkflowTrigger actual) {
        assertWorkflowTriggerAutoGeneratedPropertiesEquals(expected, actual);
        assertWorkflowTriggerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkflowTriggerAllUpdatablePropertiesEquals(WorkflowTrigger expected, WorkflowTrigger actual) {
        assertWorkflowTriggerUpdatableFieldsEquals(expected, actual);
        assertWorkflowTriggerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkflowTriggerAutoGeneratedPropertiesEquals(WorkflowTrigger expected, WorkflowTrigger actual) {
        assertThat(actual)
            .as("Verify WorkflowTrigger auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkflowTriggerUpdatableFieldsEquals(WorkflowTrigger expected, WorkflowTrigger actual) {
        assertThat(actual)
            .as("Verify WorkflowTrigger relevant properties")
            .satisfies(a -> assertThat(a.getTriggerName()).as("check triggerName").isEqualTo(expected.getTriggerName()))
            .satisfies(a -> assertThat(a.getEntityType()).as("check entityType").isEqualTo(expected.getEntityType()))
            .satisfies(a -> assertThat(a.getTriggerCondition()).as("check triggerCondition").isEqualTo(expected.getTriggerCondition()))
            .satisfies(a -> assertThat(a.getActionType()).as("check actionType").isEqualTo(expected.getActionType()))
            .satisfies(a ->
                assertThat(a.getActionConfiguration()).as("check actionConfiguration").isEqualTo(expected.getActionConfiguration())
            )
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getExecutionOrder()).as("check executionOrder").isEqualTo(expected.getExecutionOrder()))
            .satisfies(a -> assertThat(a.getLastExecuted()).as("check lastExecuted").isEqualTo(expected.getLastExecuted()))
            .satisfies(a -> assertThat(a.getExecutionCount()).as("check executionCount").isEqualTo(expected.getExecutionCount()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorkflowTriggerUpdatableRelationshipsEquals(WorkflowTrigger expected, WorkflowTrigger actual) {
        assertThat(actual)
            .as("Verify WorkflowTrigger relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()));
    }
}
