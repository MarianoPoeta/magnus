package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SystemConfigAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigAllPropertiesEquals(SystemConfig expected, SystemConfig actual) {
        assertSystemConfigAutoGeneratedPropertiesEquals(expected, actual);
        assertSystemConfigAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigAllUpdatablePropertiesEquals(SystemConfig expected, SystemConfig actual) {
        assertSystemConfigUpdatableFieldsEquals(expected, actual);
        assertSystemConfigUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigAutoGeneratedPropertiesEquals(SystemConfig expected, SystemConfig actual) {
        assertThat(actual)
            .as("Verify SystemConfig auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigUpdatableFieldsEquals(SystemConfig expected, SystemConfig actual) {
        assertThat(actual)
            .as("Verify SystemConfig relevant properties")
            .satisfies(a -> assertThat(a.getConfigKey()).as("check configKey").isEqualTo(expected.getConfigKey()))
            .satisfies(a -> assertThat(a.getConfigValue()).as("check configValue").isEqualTo(expected.getConfigValue()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a -> assertThat(a.getIsSystem()).as("check isSystem").isEqualTo(expected.getIsSystem()))
            .satisfies(a -> assertThat(a.getDataType()).as("check dataType").isEqualTo(expected.getDataType()))
            .satisfies(a -> assertThat(a.getValidationRules()).as("check validationRules").isEqualTo(expected.getValidationRules()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSystemConfigUpdatableRelationshipsEquals(SystemConfig expected, SystemConfig actual) {
        assertThat(actual)
            .as("Verify SystemConfig relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()));
    }
}
