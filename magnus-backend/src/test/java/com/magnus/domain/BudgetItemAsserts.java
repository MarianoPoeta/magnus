package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BudgetItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetItemAllPropertiesEquals(BudgetItem expected, BudgetItem actual) {
        assertBudgetItemAutoGeneratedPropertiesEquals(expected, actual);
        assertBudgetItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetItemAllUpdatablePropertiesEquals(BudgetItem expected, BudgetItem actual) {
        assertBudgetItemUpdatableFieldsEquals(expected, actual);
        assertBudgetItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetItemAutoGeneratedPropertiesEquals(BudgetItem expected, BudgetItem actual) {
        assertThat(actual)
            .as("Verify BudgetItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetItemUpdatableFieldsEquals(BudgetItem expected, BudgetItem actual) {
        assertThat(actual)
            .as("Verify BudgetItem relevant properties")
            .satisfies(a -> assertThat(a.getItemType()).as("check itemType").isEqualTo(expected.getItemType()))
            .satisfies(a -> assertThat(a.getTemplateId()).as("check templateId").isEqualTo(expected.getTemplateId()))
            .satisfies(a -> assertThat(a.getTemplateName()).as("check templateName").isEqualTo(expected.getTemplateName()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a ->
                assertThat(a.getUnitPrice()).as("check unitPrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitPrice())
            )
            .satisfies(a ->
                assertThat(a.getUnitCost()).as("check unitCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getUnitCost())
            )
            .satisfies(a ->
                assertThat(a.getTotalPrice())
                    .as("check totalPrice")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalPrice())
            )
            .satisfies(a ->
                assertThat(a.getTotalCost()).as("check totalCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getTotalCost())
            )
            .satisfies(a -> assertThat(a.getCustomizations()).as("check customizations").isEqualTo(expected.getCustomizations()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getIsCustomized()).as("check isCustomized").isEqualTo(expected.getIsCustomized()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetItemUpdatableRelationshipsEquals(BudgetItem expected, BudgetItem actual) {
        assertThat(actual)
            .as("Verify BudgetItem relationships")
            .satisfies(a -> assertThat(a.getBudget()).as("check budget").isEqualTo(expected.getBudget()));
    }
}
