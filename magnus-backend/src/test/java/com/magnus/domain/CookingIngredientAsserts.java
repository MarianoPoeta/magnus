package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CookingIngredientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingIngredientAllPropertiesEquals(CookingIngredient expected, CookingIngredient actual) {
        assertCookingIngredientAutoGeneratedPropertiesEquals(expected, actual);
        assertCookingIngredientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingIngredientAllUpdatablePropertiesEquals(CookingIngredient expected, CookingIngredient actual) {
        assertCookingIngredientUpdatableFieldsEquals(expected, actual);
        assertCookingIngredientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingIngredientAutoGeneratedPropertiesEquals(CookingIngredient expected, CookingIngredient actual) {
        assertThat(actual)
            .as("Verify CookingIngredient auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingIngredientUpdatableFieldsEquals(CookingIngredient expected, CookingIngredient actual) {
        assertThat(actual)
            .as("Verify CookingIngredient relevant properties")
            .satisfies(a -> assertThat(a.getOriginalQuantity()).as("check originalQuantity").isEqualTo(expected.getOriginalQuantity()))
            .satisfies(a -> assertThat(a.getModifiedQuantity()).as("check modifiedQuantity").isEqualTo(expected.getModifiedQuantity()))
            .satisfies(a -> assertThat(a.getModifiedUnit()).as("check modifiedUnit").isEqualTo(expected.getModifiedUnit()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getAddedByUser()).as("check addedByUser").isEqualTo(expected.getAddedByUser()))
            .satisfies(a -> assertThat(a.getIsAvailable()).as("check isAvailable").isEqualTo(expected.getIsAvailable()))
            .satisfies(a -> assertThat(a.getAvailableAt()).as("check availableAt").isEqualTo(expected.getAvailableAt()))
            .satisfies(a -> assertThat(a.getLastModifiedBy()).as("check lastModifiedBy").isEqualTo(expected.getLastModifiedBy()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCookingIngredientUpdatableRelationshipsEquals(CookingIngredient expected, CookingIngredient actual) {
        assertThat(actual)
            .as("Verify CookingIngredient relationships")
            .satisfies(a -> assertThat(a.getProductRequirement()).as("check productRequirement").isEqualTo(expected.getProductRequirement())
            )
            .satisfies(a -> assertThat(a.getCookingSchedule()).as("check cookingSchedule").isEqualTo(expected.getCookingSchedule()));
    }
}
