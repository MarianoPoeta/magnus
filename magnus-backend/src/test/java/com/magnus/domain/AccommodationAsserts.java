package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AccommodationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccommodationAllPropertiesEquals(Accommodation expected, Accommodation actual) {
        assertAccommodationAutoGeneratedPropertiesEquals(expected, actual);
        assertAccommodationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccommodationAllUpdatablePropertiesEquals(Accommodation expected, Accommodation actual) {
        assertAccommodationUpdatableFieldsEquals(expected, actual);
        assertAccommodationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccommodationAutoGeneratedPropertiesEquals(Accommodation expected, Accommodation actual) {
        assertThat(actual)
            .as("Verify Accommodation auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccommodationUpdatableFieldsEquals(Accommodation expected, Accommodation actual) {
        assertThat(actual)
            .as("Verify Accommodation relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a ->
                assertThat(a.getPricePerNight())
                    .as("check pricePerNight")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPricePerNight())
            )
            .satisfies(a ->
                assertThat(a.getCostPerNight())
                    .as("check costPerNight")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCostPerNight())
            )
            .satisfies(a -> assertThat(a.getMaxOccupancy()).as("check maxOccupancy").isEqualTo(expected.getMaxOccupancy()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getAmenities()).as("check amenities").isEqualTo(expected.getAmenities()))
            .satisfies(a -> assertThat(a.getCheckInTime()).as("check checkInTime").isEqualTo(expected.getCheckInTime()))
            .satisfies(a -> assertThat(a.getCheckOutTime()).as("check checkOutTime").isEqualTo(expected.getCheckOutTime()))
            .satisfies(a -> assertThat(a.getRating()).as("check rating").isEqualTo(expected.getRating()))
            .satisfies(a -> assertThat(a.getContactInfo()).as("check contactInfo").isEqualTo(expected.getContactInfo()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsTemplate()).as("check isTemplate").isEqualTo(expected.getIsTemplate()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAccommodationUpdatableRelationshipsEquals(Accommodation expected, Accommodation actual) {
        // empty method
    }
}
