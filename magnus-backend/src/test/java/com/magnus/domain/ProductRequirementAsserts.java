package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductRequirementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductRequirementAllPropertiesEquals(ProductRequirement expected, ProductRequirement actual) {
        assertProductRequirementAutoGeneratedPropertiesEquals(expected, actual);
        assertProductRequirementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductRequirementAllUpdatablePropertiesEquals(ProductRequirement expected, ProductRequirement actual) {
        assertProductRequirementUpdatableFieldsEquals(expected, actual);
        assertProductRequirementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductRequirementAutoGeneratedPropertiesEquals(ProductRequirement expected, ProductRequirement actual) {
        assertThat(actual)
            .as("Verify ProductRequirement auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductRequirementUpdatableFieldsEquals(ProductRequirement expected, ProductRequirement actual) {
        assertThat(actual)
            .as("Verify ProductRequirement relevant properties")
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getUnit()).as("check unit").isEqualTo(expected.getUnit()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a ->
                assertThat(a.getEstimatedCost())
                    .as("check estimatedCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getEstimatedCost())
            )
            .satisfies(a ->
                assertThat(a.getActualCost())
                    .as("check actualCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getActualCost())
            )
            .satisfies(a -> assertThat(a.getIsPurchased()).as("check isPurchased").isEqualTo(expected.getIsPurchased()))
            .satisfies(a -> assertThat(a.getPurchasedBy()).as("check purchasedBy").isEqualTo(expected.getPurchasedBy()))
            .satisfies(a -> assertThat(a.getPurchasedAt()).as("check purchasedAt").isEqualTo(expected.getPurchasedAt()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getConflictStatus()).as("check conflictStatus").isEqualTo(expected.getConflictStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductRequirementUpdatableRelationshipsEquals(ProductRequirement expected, ProductRequirement actual) {
        assertThat(actual)
            .as("Verify ProductRequirement relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getRelatedTask()).as("check relatedTask").isEqualTo(expected.getRelatedTask()))
            .satisfies(a -> assertThat(a.getFoodItem()).as("check foodItem").isEqualTo(expected.getFoodItem()))
            .satisfies(a -> assertThat(a.getActivity()).as("check activity").isEqualTo(expected.getActivity()));
    }
}
