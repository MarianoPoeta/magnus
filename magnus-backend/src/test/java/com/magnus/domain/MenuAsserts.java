package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MenuAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuAllPropertiesEquals(Menu expected, Menu actual) {
        assertMenuAutoGeneratedPropertiesEquals(expected, actual);
        assertMenuAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuAllUpdatablePropertiesEquals(Menu expected, Menu actual) {
        assertMenuUpdatableFieldsEquals(expected, actual);
        assertMenuUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuAutoGeneratedPropertiesEquals(Menu expected, Menu actual) {
        assertThat(actual)
            .as("Verify Menu auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuUpdatableFieldsEquals(Menu expected, Menu actual) {
        assertThat(actual)
            .as("Verify Menu relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getType()).as("check type").isEqualTo(expected.getType()))
            .satisfies(a ->
                assertThat(a.getPricePerPerson())
                    .as("check pricePerPerson")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPricePerPerson())
            )
            .satisfies(a ->
                assertThat(a.getCostPerPerson())
                    .as("check costPerPerson")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCostPerPerson())
            )
            .satisfies(a -> assertThat(a.getMinPeople()).as("check minPeople").isEqualTo(expected.getMinPeople()))
            .satisfies(a -> assertThat(a.getMaxPeople()).as("check maxPeople").isEqualTo(expected.getMaxPeople()))
            .satisfies(a -> assertThat(a.getRestaurant()).as("check restaurant").isEqualTo(expected.getRestaurant()))
            .satisfies(a -> assertThat(a.getPreparationTime()).as("check preparationTime").isEqualTo(expected.getPreparationTime()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsTemplate()).as("check isTemplate").isEqualTo(expected.getIsTemplate()))
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMenuUpdatableRelationshipsEquals(Menu expected, Menu actual) {
        assertThat(actual)
            .as("Verify Menu relationships")
            .satisfies(a -> assertThat(a.getIncludedFoodItems()).as("check includedFoodItems").isEqualTo(expected.getIncludedFoodItems()));
    }
}
