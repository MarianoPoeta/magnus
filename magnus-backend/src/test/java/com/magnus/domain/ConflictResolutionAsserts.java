package com.magnus.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConflictResolutionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConflictResolutionAllPropertiesEquals(ConflictResolution expected, ConflictResolution actual) {
        assertConflictResolutionAutoGeneratedPropertiesEquals(expected, actual);
        assertConflictResolutionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConflictResolutionAllUpdatablePropertiesEquals(ConflictResolution expected, ConflictResolution actual) {
        assertConflictResolutionUpdatableFieldsEquals(expected, actual);
        assertConflictResolutionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConflictResolutionAutoGeneratedPropertiesEquals(ConflictResolution expected, ConflictResolution actual) {
        assertThat(actual)
            .as("Verify ConflictResolution auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConflictResolutionUpdatableFieldsEquals(ConflictResolution expected, ConflictResolution actual) {
        assertThat(actual)
            .as("Verify ConflictResolution relevant properties")
            .satisfies(a -> assertThat(a.getEntityType()).as("check entityType").isEqualTo(expected.getEntityType()))
            .satisfies(a -> assertThat(a.getEntityId()).as("check entityId").isEqualTo(expected.getEntityId()))
            .satisfies(a -> assertThat(a.getFieldName()).as("check fieldName").isEqualTo(expected.getFieldName()))
            .satisfies(a -> assertThat(a.getLocalValue()).as("check localValue").isEqualTo(expected.getLocalValue()))
            .satisfies(a -> assertThat(a.getRemoteValue()).as("check remoteValue").isEqualTo(expected.getRemoteValue()))
            .satisfies(a -> assertThat(a.getResolvedValue()).as("check resolvedValue").isEqualTo(expected.getResolvedValue()))
            .satisfies(a -> assertThat(a.getResolutionStrategy()).as("check resolutionStrategy").isEqualTo(expected.getResolutionStrategy())
            )
            .satisfies(a -> assertThat(a.getIsResolved()).as("check isResolved").isEqualTo(expected.getIsResolved()))
            .satisfies(a -> assertThat(a.getResolvedAt()).as("check resolvedAt").isEqualTo(expected.getResolvedAt()))
            .satisfies(a -> assertThat(a.getConflictDetectedAt()).as("check conflictDetectedAt").isEqualTo(expected.getConflictDetectedAt())
            )
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConflictResolutionUpdatableRelationshipsEquals(ConflictResolution expected, ConflictResolution actual) {
        assertThat(actual)
            .as("Verify ConflictResolution relationships")
            .satisfies(a -> assertThat(a.getConflictUser()).as("check conflictUser").isEqualTo(expected.getConflictUser()))
            .satisfies(a -> assertThat(a.getResolvedBy()).as("check resolvedBy").isEqualTo(expected.getResolvedBy()));
    }
}
