package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class WeeklyPlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWeeklyPlanAllPropertiesEquals(WeeklyPlan expected, WeeklyPlan actual) {
        assertWeeklyPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertWeeklyPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWeeklyPlanAllUpdatablePropertiesEquals(WeeklyPlan expected, WeeklyPlan actual) {
        assertWeeklyPlanUpdatableFieldsEquals(expected, actual);
        assertWeeklyPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWeeklyPlanAutoGeneratedPropertiesEquals(WeeklyPlan expected, WeeklyPlan actual) {
        assertThat(actual)
            .as("Verify WeeklyPlan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWeeklyPlanUpdatableFieldsEquals(WeeklyPlan expected, WeeklyPlan actual) {
        assertThat(actual)
            .as("Verify WeeklyPlan relevant properties")
            .satisfies(a -> assertThat(a.getWeekStart()).as("check weekStart").isEqualTo(expected.getWeekStart()))
            .satisfies(a -> assertThat(a.getWeekEnd()).as("check weekEnd").isEqualTo(expected.getWeekEnd()))
            .satisfies(a -> assertThat(a.getPlanName()).as("check planName").isEqualTo(expected.getPlanName()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getTotalBudgets()).as("check totalBudgets").isEqualTo(expected.getTotalBudgets()))
            .satisfies(a -> assertThat(a.getTotalGuests()).as("check totalGuests").isEqualTo(expected.getTotalGuests()))
            .satisfies(a ->
                assertThat(a.getEstimatedCost())
                    .as("check estimatedCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getEstimatedCost())
            )
            .satisfies(a ->
                assertThat(a.getActualCost())
                    .as("check actualCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getActualCost())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getIsConsolidated()).as("check isConsolidated").isEqualTo(expected.getIsConsolidated()))
            .satisfies(a -> assertThat(a.getConsolidatedAt()).as("check consolidatedAt").isEqualTo(expected.getConsolidatedAt()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWeeklyPlanUpdatableRelationshipsEquals(WeeklyPlan expected, WeeklyPlan actual) {
        assertThat(actual)
            .as("Verify WeeklyPlan relationships")
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()));
    }
}
