package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FoodItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFoodItemAllPropertiesEquals(FoodItem expected, FoodItem actual) {
        assertFoodItemAutoGeneratedPropertiesEquals(expected, actual);
        assertFoodItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFoodItemAllUpdatablePropertiesEquals(FoodItem expected, FoodItem actual) {
        assertFoodItemUpdatableFieldsEquals(expected, actual);
        assertFoodItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFoodItemAutoGeneratedPropertiesEquals(FoodItem expected, FoodItem actual) {
        assertThat(actual)
            .as("Verify FoodItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFoodItemUpdatableFieldsEquals(FoodItem expected, FoodItem actual) {
        assertThat(actual)
            .as("Verify FoodItem relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCategory()).as("check category").isEqualTo(expected.getCategory()))
            .satisfies(a ->
                assertThat(a.getBasePrice()).as("check basePrice").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBasePrice())
            )
            .satisfies(a ->
                assertThat(a.getBaseCost()).as("check baseCost").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getBaseCost())
            )
            .satisfies(a -> assertThat(a.getServingSize()).as("check servingSize").isEqualTo(expected.getServingSize()))
            .satisfies(a -> assertThat(a.getGuestsPerUnit()).as("check guestsPerUnit").isEqualTo(expected.getGuestsPerUnit()))
            .satisfies(a -> assertThat(a.getMaxUnits()).as("check maxUnits").isEqualTo(expected.getMaxUnits()))
            .satisfies(a -> assertThat(a.getAllergens()).as("check allergens").isEqualTo(expected.getAllergens()))
            .satisfies(a -> assertThat(a.getDietaryInfo()).as("check dietaryInfo").isEqualTo(expected.getDietaryInfo()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsTemplate()).as("check isTemplate").isEqualTo(expected.getIsTemplate()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFoodItemUpdatableRelationshipsEquals(FoodItem expected, FoodItem actual) {
        assertThat(actual)
            .as("Verify FoodItem relationships")
            .satisfies(a -> assertThat(a.getAvailableMenus()).as("check availableMenus").isEqualTo(expected.getAvailableMenus()));
    }
}
