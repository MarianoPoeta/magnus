package com.magnus.domain;

import static com.magnus.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TransportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAllPropertiesEquals(Transport expected, Transport actual) {
        assertTransportAutoGeneratedPropertiesEquals(expected, actual);
        assertTransportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAllUpdatablePropertiesEquals(Transport expected, Transport actual) {
        assertTransportUpdatableFieldsEquals(expected, actual);
        assertTransportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportAutoGeneratedPropertiesEquals(Transport expected, Transport actual) {
        assertThat(actual)
            .as("Verify Transport auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportUpdatableFieldsEquals(Transport expected, Transport actual) {
        assertThat(actual)
            .as("Verify Transport relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getVehicleType()).as("check vehicleType").isEqualTo(expected.getVehicleType()))
            .satisfies(a -> assertThat(a.getCapacity()).as("check capacity").isEqualTo(expected.getCapacity()))
            .satisfies(a ->
                assertThat(a.getPricePerHour())
                    .as("check pricePerHour")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPricePerHour())
            )
            .satisfies(a ->
                assertThat(a.getPricePerKm())
                    .as("check pricePerKm")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPricePerKm())
            )
            .satisfies(a ->
                assertThat(a.getCostPerHour())
                    .as("check costPerHour")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getCostPerHour())
            )
            .satisfies(a ->
                assertThat(a.getCostPerKm()).as("check costPerKm").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getCostPerKm())
            )
            .satisfies(a -> assertThat(a.getIncludesDriver()).as("check includesDriver").isEqualTo(expected.getIncludesDriver()))
            .satisfies(a ->
                assertThat(a.getDriverCost())
                    .as("check driverCost")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getDriverCost())
            )
            .satisfies(a -> assertThat(a.getFuelType()).as("check fuelType").isEqualTo(expected.getFuelType()))
            .satisfies(a -> assertThat(a.getContactInfo()).as("check contactInfo").isEqualTo(expected.getContactInfo()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getIsTemplate()).as("check isTemplate").isEqualTo(expected.getIsTemplate()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTransportUpdatableRelationshipsEquals(Transport expected, Transport actual) {
        // empty method
    }
}
